package aptech.dating.model;
// Generated Oct 30, 2023, 4:19:04 PM by Hibernate Tools 4.3.6.Final

import static jakarta.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name="\"user\"")
public class User implements java.io.Serializable {
	private Integer id;
	private Drinking drinking;
	private Family family;
	private Habit habit;
	private Literacy literacy;
	private Purpose purpose;
	private Smoking smoking;
	private Status status;
	private Work work;
	private String email;
	private String phone;
	private String password;
	private String fullname;
	private Date dob;
	private String gender;
	private String finding;
	private int distance;
	private String address;
	private String school;
	private String description;
	private Integer height;
	private Integer weight;
	private String zodiac;
	private Date createTime;
	private Date lastLogin;
	private Boolean online;
	private Set<Matching> matchingsForSecondUserId = new HashSet<Matching>(0);
	private Set<Report> reportsForReportedId = new HashSet<Report>(0);
	private Set<UserConversation> userConversations = new HashSet<UserConversation>(0);
	private Set<UserExercise> userExercises = new HashSet<UserExercise>(0);
	private Set<VideoCall> videoCallsForReceiverId = new HashSet<VideoCall>(0);
	private Set<Message> messages = new HashSet<Message>(0);
	private Set<UserHobby> userHobbies = new HashSet<UserHobby>(0);
	private Set<Block> blocksForBlockedId = new HashSet<Block>(0);
	private Set<UserImage> userImages = new HashSet<UserImage>(0);
	private Set<Matching> matchingsForFirstUserId = new HashSet<Matching>(0);
	private Set<UserLanguage> userLanguages = new HashSet<UserLanguage>(0);
	private Set<VideoCall> videoCallsForCallerId = new HashSet<VideoCall>(0);
	private Set<Block> blocksForUseId = new HashSet<Block>(0);
	private Set<UserExpecting> userExpectings = new HashSet<UserExpecting>(0);
	private Set<Banned> banneds = new HashSet<Banned>(0);
	private Set<UserPet> userPets = new HashSet<UserPet>(0);
	private Set<UserSinger> userSingers = new HashSet<UserSinger>(0);
	private Set<Report> reportsForReporterId = new HashSet<Report>(0);
	private Set<UserMusic> userMusics = new HashSet<UserMusic>(0);

	public User() {
	}
	
	public User(Drinking drinking, Family family, Habit habit, Literacy literacy, Purpose purpose,
			Smoking smoking, Status status, Work work, String email, String phone, String password, String fullname,
			Date dob, String gender, String finding, int distance, String address, String school, String description,
			Integer height, Integer weight, String zodiac, Date createTime, Date lastLogin, Boolean online) {
		super();
		this.drinking = drinking;
		this.family = family;
		this.habit = habit;
		this.literacy = literacy;
		this.purpose = purpose;
		this.smoking = smoking;
		this.status = status;
		this.work = work;
		this.email = email;
		this.phone = phone;
		this.password = password;
		this.fullname = fullname;
		this.dob = dob;
		this.gender = gender;
		this.finding = finding;
		this.distance = distance;
		this.address = address;
		this.school = school;
		this.description = description;
		this.height = height;
		this.weight = weight;
		this.zodiac = zodiac;
		this.createTime = createTime;
		this.lastLogin = lastLogin;
		this.online = online;
	}

	
	public User(Drinking drinking, Family family, Habit habit, Literacy literacy, Purpose purpose,
			Smoking smoking, Status status, Work work, String email, String phone, String password, String fullname,
			Date dob, String gender, String finding, int distance, String address, String school, String description,
			Integer height, Integer weight, String zodiac, Date createTime, Date lastLogin, Boolean online,
			Set<Matching> matchingsForSecondUserId, Set<Report> reportsForReportedId,
			Set<UserConversation> userConversations, Set<UserExercise> userExercises,
			Set<VideoCall> videoCallsForReceiverId, Set<Message> messages, Set<UserHobby> userHobbies,
			Set<Block> blocksForBlockedId, Set<UserImage> userImages, Set<Matching> matchingsForFirstUserId,
			Set<UserLanguage> userLanguages, Set<VideoCall> videoCallsForCallerId, Set<Block> blocksForUseId,
			Set<UserExpecting> userExpectings, Set<Banned> banneds, Set<UserPet> userPets, Set<UserSinger> userSingers,
			Set<Report> reportsForReporterId, Set<UserMusic> userMusics) {
		super();
		this.drinking = drinking;
		this.family = family;
		this.habit = habit;
		this.literacy = literacy;
		this.purpose = purpose;
		this.smoking = smoking;
		this.status = status;
		this.work = work;
		this.email = email;
		this.phone = phone;
		this.password = password;
		this.fullname = fullname;
		this.dob = dob;
		this.gender = gender;
		this.finding = finding;
		this.distance = distance;
		this.address = address;
		this.school = school;
		this.description = description;
		this.height = height;
		this.weight = weight;
		this.zodiac = zodiac;
		this.createTime = createTime;
		this.lastLogin = lastLogin;
		this.online = online;
		this.matchingsForSecondUserId = matchingsForSecondUserId;
		this.reportsForReportedId = reportsForReportedId;
		this.userConversations = userConversations;
		this.userExercises = userExercises;
		this.videoCallsForReceiverId = videoCallsForReceiverId;
		this.messages = messages;
		this.userHobbies = userHobbies;
		this.blocksForBlockedId = blocksForBlockedId;
		this.userImages = userImages;
		this.matchingsForFirstUserId = matchingsForFirstUserId;
		this.userLanguages = userLanguages;
		this.videoCallsForCallerId = videoCallsForCallerId;
		this.blocksForUseId = blocksForUseId;
		this.userExpectings = userExpectings;
		this.banneds = banneds;
		this.userPets = userPets;
		this.userSingers = userSingers;
		this.reportsForReporterId = reportsForReporterId;
		this.userMusics = userMusics;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY ,cascade = CascadeType.ALL)
	 @JsonIgnore @JoinColumn(name = "drinking_id")
	public Drinking getDrinking() {
		return this.drinking;
	}

	public void setDrinking(Drinking drinking) {
		this.drinking = drinking;
	}

	@ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
	 @JsonIgnore @JoinColumn(name = "family_id")
	public Family getFamily() {
		return this.family;
	}

	public void setFamily(Family family) {
		this.family = family;
	}

	@ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
	 @JsonIgnore @JoinColumn(name = "habit_id")
	public Habit getHabit() {
		return this.habit;
	}

	public void setHabit(Habit habit) {
		this.habit = habit;
	}

	@ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
	 @JsonIgnore @JoinColumn(name = "literacy_id")
	public Literacy getLiteracy() {
		return this.literacy;
	}

	public void setLiteracy(Literacy literacy) {
		this.literacy = literacy;
	}

	@ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.MERGE)
	 @JsonIgnore @JoinColumn(name = "purpose_id", nullable = false)
	public Purpose getPurpose() {
		return this.purpose;
	}

	public void setPurpose(Purpose purpose) {
		this.purpose = purpose;
	}

	@ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
	 @JsonIgnore @JoinColumn(name = "smoking_id")
	public Smoking getSmoking() {
		return this.smoking;
	}

	public void setSmoking(Smoking smoking) {
		this.smoking = smoking;
	}

	@ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.MERGE)
	 @JsonIgnore @JoinColumn(name = "status_id", nullable = false)
	public Status getStatus() {
		return this.status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
	 @JsonIgnore @JoinColumn(name = "work_id")
	public Work getWork() {
		return this.work;
	}

	public void setWork(Work work) {
		this.work = work;
	}

	@Column(name = "email", nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "phone", nullable = false, length = 20)
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "fullname", nullable = false)
	public String getFullname() {
		return this.fullname;
	}

	public void setFullname(String fullname) {
		this.fullname = fullname;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DOB", nullable = false, length = 10)
	public Date getDob() {
		return this.dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	@Column(name = "gender", nullable = false, length = 10)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Column(name = "finding", nullable = false, length = 10)
	public String getFinding() {
		return this.finding;
	}

	public void setFinding(String finding) {
		this.finding = finding;
	}

	@Column(name = "distance", nullable = false)
	public int getDistance() {
		return this.distance;
	}

	public void setDistance(int distance) {
		this.distance = distance;
	}

	@Column(name = "address", nullable = false)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "school")
	public String getSchool() {
		return this.school;
	}

	public void setSchool(String school) {
		this.school = school;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "height")
	public Integer getHeight() {
		return this.height;
	}

	public void setHeight(Integer height) {
		this.height = height;
	}

	@Column(name = "weight")
	public Integer getWeight() {
		return this.weight;
	}

	public void setWeight(Integer weight) {
		this.weight = weight;
	}

	@Column(name = "zodiac", length = 12)
	public String getZodiac() {
		return this.zodiac;
	}

	public void setZodiac(String zodiac) {
		this.zodiac = zodiac;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_time", nullable = false, length = 23)
    //@JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSX")
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_login", nullable = false, length = 23)
	public Date getLastLogin() {
		return this.lastLogin;
	}

	public void setLastLogin(Date lastLogin) {
		this.lastLogin = lastLogin;
	}

	@Column(name = "online")
	public Boolean getOnline() {
		return this.online;
	}

	public void setOnline(Boolean online) {
		this.online = online;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userBySecondUserId")
	public Set<Matching> getMatchingsForSecondUserId() {
		return this.matchingsForSecondUserId;
	}

	public void setMatchingsForSecondUserId(Set<Matching> matchingsForSecondUserId) {
		this.matchingsForSecondUserId = matchingsForSecondUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByReportedId")
	public Set<Report> getReportsForReportedId() {
		return this.reportsForReportedId;
	}

	public void setReportsForReportedId(Set<Report> reportsForReportedId) {
		this.reportsForReportedId = reportsForReportedId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserConversation> getUserConversations() {
		return this.userConversations;
	}

	public void setUserConversations(Set<UserConversation> userConversations) {
		this.userConversations = userConversations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserExercise> getUserExercises() {
		return this.userExercises;
	}

	public void setUserExercises(Set<UserExercise> userExercises) {
		this.userExercises = userExercises;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByReceiverId")
	public Set<VideoCall> getVideoCallsForReceiverId() {
		return this.videoCallsForReceiverId;
	}

	public void setVideoCallsForReceiverId(Set<VideoCall> videoCallsForReceiverId) {
		this.videoCallsForReceiverId = videoCallsForReceiverId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Message> getMessages() {
		return this.messages;
	}

	public void setMessages(Set<Message> messages) {
		this.messages = messages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserHobby> getUserHobbies() {
		return this.userHobbies;
	}

	public void setUserHobbies(Set<UserHobby> userHobbies) {
		this.userHobbies = userHobbies;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByBlockedId")
	public Set<Block> getBlocksForBlockedId() {
		return this.blocksForBlockedId;
	}

	public void setBlocksForBlockedId(Set<Block> blocksForBlockedId) {
		this.blocksForBlockedId = blocksForBlockedId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserImage> getUserImages() {
		return this.userImages;
	}

	public void setUserImages(Set<UserImage> userImages) {
		this.userImages = userImages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByFirstUserId")
	public Set<Matching> getMatchingsForFirstUserId() {
		return this.matchingsForFirstUserId;
	}

	public void setMatchingsForFirstUserId(Set<Matching> matchingsForFirstUserId) {
		this.matchingsForFirstUserId = matchingsForFirstUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserLanguage> getUserLanguages() {
		return this.userLanguages;
	}

	public void setUserLanguages(Set<UserLanguage> userLanguages) {
		this.userLanguages = userLanguages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCallerId")
	public Set<VideoCall> getVideoCallsForCallerId() {
		return this.videoCallsForCallerId;
	}

	public void setVideoCallsForCallerId(Set<VideoCall> videoCallsForCallerId) {
		this.videoCallsForCallerId = videoCallsForCallerId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUseId")
	public Set<Block> getBlocksForUseId() {
		return this.blocksForUseId;
	}

	public void setBlocksForUseId(Set<Block> blocksForUseId) {
		this.blocksForUseId = blocksForUseId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserExpecting> getUserExpectings() {
		return this.userExpectings;
	}

	public void setUserExpectings(Set<UserExpecting> userExpectings) {
		this.userExpectings = userExpectings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Banned> getBanneds() {
		return this.banneds;
	}

	public void setBanneds(Set<Banned> banneds) {
		this.banneds = banneds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserPet> getUserPets() {
		return this.userPets;
	}

	public void setUserPets(Set<UserPet> userPets) {
		this.userPets = userPets;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserSinger> getUserSingers() {
		return this.userSingers;
	}

	public void setUserSingers(Set<UserSinger> userSingers) {
		this.userSingers = userSingers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByReporterId")
	public Set<Report> getReportsForReporterId() {
		return this.reportsForReporterId;
	}

	public void setReportsForReporterId(Set<Report> reportsForReporterId) {
		this.reportsForReporterId = reportsForReporterId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserMusic> getUserMusics() {
		return this.userMusics;
	}

	public void setUserMusics(Set<UserMusic> userMusics) {
		this.userMusics = userMusics;
	}

}
